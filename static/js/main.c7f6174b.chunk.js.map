{"version":3,"sources":["scripts/MersenneTwister.js","scripts/TitleRandomiser.js","layout/Header.js","layout/Wrapper.js","data/client.js","skeletons/PostList.js","components/TagItem.js","components/TagList.js","components/PostItem.js","views/PostList.js","data/posts.js","skeletons/PostView.js","components/CodeBlock.js","views/PostView.js","data/post.js","scripts/QuoteRandomiser.js","views/EmptyView.js","index.js"],"names":["MersenneTwister","seed","undefined","Date","getTime","this","N","M","MATRIX_A","UPPER_MASK","LOWER_MASK","mt","mti","init_genrand","random","prototype","s","init_by_array","init_key","key_length","i","j","k","genrand_int32","y","mag01","kk","genrand_int31","genrand_real1","genrand_real3","genrand_res53","options","Header","className","to","props","title","React","Component","Wrapper","class","children","createQuery","query","callback","window","fetch","process","method","headers","body","JSON","stringify","then","response","json","data","errors","PostListSkeleton","Array","total","map","element","index","count","width","height","defaultProps","TagItem","tag","createElement","TagList","tags","PostItem","featuredImage","slug","src","url","alt","excerpt","dateTime","publishedAt","format","tagCollection","items","PostList","state","posts","console","log","setState","postCollection","postMarkup","post","PostViewSkeleton","CodeBlock","language","value","style","okaidia","PureComponent","PostView","match","params","replace","source","content","renderers","code","plugins","gfm","EmptyView","Math","floor","length","pageTitle","ReactDOM","render","StrictMode","basename","path","component","exact","document","getElementById"],"mappings":"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","file":"static/js/main.c7f6174b.chunk.js","sourcesContent":["\n/*\n  I've wrapped Makoto Matsumoto and Takuji Nishimura's code in a namespace\n  so it's better encapsulated. Now you can have multiple random number generators\n  and they won't stomp all over eachother's state.\n  \n  If you want to use this as a substitute for Math.random(), use the random()\n  method like so:\n  \n  var m = new MersenneTwister();\n  var randomNumber = m.random();\n  \n  You can also call the other genrand_{foo}() methods on the instance.\n\n  If you want to use a specific seed in order to get a repeatable random\n  sequence, pass an integer into the constructor:\n\n  var m = new MersenneTwister(123);\n\n  and that will always produce the same random sequence.\n\n  Sean McCullough (banksean@gmail.com)\n*/\n\n/* \n   A C-program for MT19937, with initialization improved 2002/1/26.\n   Coded by Takuji Nishimura and Makoto Matsumoto.\n \n   Before using, initialize the state by using init_genrand(seed)  \n   or init_by_array(init_key, key_length).\n \n   Copyright (C) 1997 - 2002, Makoto Matsumoto and Takuji Nishimura,\n   All rights reserved.                          \n \n   Redistribution and use in source and binary forms, with or without\n   modification, are permitted provided that the following conditions\n   are met:\n \n     1. Redistributions of source code must retain the above copyright\n        notice, this list of conditions and the following disclaimer.\n \n     2. Redistributions in binary form must reproduce the above copyright\n        notice, this list of conditions and the following disclaimer in the\n        documentation and/or other materials provided with the distribution.\n \n     3. The names of its contributors may not be used to endorse or promote \n        products derived from this software without specific prior written \n        permission.\n \n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR\n   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n   EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n   PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n   PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\n   LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n   NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n   SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n \n \n   Any feedback is very welcome.\n   http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html\n   email: m-mat @ math.sci.hiroshima-u.ac.jp (remove space)\n*/\n\nvar MersenneTwister = function (seed) {\n  if (seed === undefined) {\n    seed = new Date().getTime();\n  }\n  /* Period parameters */\n  this.N = 624;\n  this.M = 397;\n  this.MATRIX_A = 0x9908b0df;   /* constant vector a */\n  this.UPPER_MASK = 0x80000000; /* most significant w-r bits */\n  this.LOWER_MASK = 0x7fffffff; /* least significant r bits */\n\n  this.mt = [this.N]; /* the array for the state vector */\n  this.mti = this.N + 1; /* mti==N+1 means mt[N] is not initialized */\n\n  this.init_genrand(seed);\n}\n\n/* initializes mt[N] with a seed */\nMersenneTwister.prototype.init_genrand = function (seed) {\n  this.mt[0] = seed >>> 0;\n  for (this.mti = 1; this.mti < this.N; this.mti++) {\n    var s = this.mt[this.mti - 1] ^ (this.mt[this.mti - 1] >>> 30);\n    this.mt[this.mti] = (((((s & 0xffff0000) >>> 16) * 1812433253) << 16) + (s & 0x0000ffff) * 1812433253)\n      + this.mti;\n    /* See Knuth TAOCP Vol2. 3rd Ed. P.106 for multiplier. */\n    /* In the previous versions, MSBs of the seed affect   */\n    /* only MSBs of the array mt[].                        */\n    /* 2002/01/09 modified by Makoto Matsumoto             */\n    this.mt[this.mti] >>>= 0;\n    /* for >32 bit machines */\n  }\n}\n\n/* initialize by an array with array-length */\n/* init_key is the array for initializing keys */\n/* key_length is its length */\n/* slight change for C++, 2004/2/26 */\nMersenneTwister.prototype.init_by_array = function (init_key, key_length) {\n  var i, j, k;\n  this.init_genrand(19650218);\n  i = 1; j = 0;\n  k = (this.N > key_length ? this.N : key_length);\n  for (; k; k--) {\n    var s = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30)\n    this.mt[i] = (this.mt[i] ^ (((((s & 0xffff0000) >>> 16) * 1664525) << 16) + ((s & 0x0000ffff) * 1664525)))\n      + init_key[j] + j; /* non linear */\n    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n    i++; j++;\n    if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }\n    if (j >= key_length) j = 0;\n  }\n  for (k = this.N - 1; k; k--) {\n    var seed = this.mt[i - 1] ^ (this.mt[i - 1] >>> 30);\n    this.mt[i] = (this.mt[i] ^ (((((seed & 0xffff0000) >>> 16) * 1566083941) << 16) + (seed & 0x0000ffff) * 1566083941))\n      - i; /* non linear */\n    this.mt[i] >>>= 0; /* for WORDSIZE > 32 machines */\n    i++;\n    if (i >= this.N) { this.mt[0] = this.mt[this.N - 1]; i = 1; }\n  }\n\n  this.mt[0] = 0x80000000; /* MSB is 1; assuring non-zero initial array */\n}\n\n/* generates a random number on [0,0xffffffff]-interval */\nMersenneTwister.prototype.genrand_int32 = function () {\n  var y;\n  var mag01 = [0x0, this.MATRIX_A];\n  /* mag01[x] = x * MATRIX_A  for x=0,1 */\n\n  if (this.mti >= this.N) { /* generate N words at one time */\n    var kk;\n\n    if (this.mti === this.N + 1)   /* if init_genrand() has not been called, */\n      this.init_genrand(5489); /* a default initial seed is used */\n\n    for (kk = 0; kk < this.N - this.M; kk++) {\n      y = (this.mt[kk] & this.UPPER_MASK) | (this.mt[kk + 1] & this.LOWER_MASK);\n      this.mt[kk] = this.mt[kk + this.M] ^ (y >>> 1) ^ mag01[y & 0x1];\n    }\n    for (; kk < this.N - 1; kk++) {\n      y = (this.mt[kk] & this.UPPER_MASK) | (this.mt[kk + 1] & this.LOWER_MASK);\n      this.mt[kk] = this.mt[kk + (this.M - this.N)] ^ (y >>> 1) ^ mag01[y & 0x1];\n    }\n    y = (this.mt[this.N - 1] & this.UPPER_MASK) | (this.mt[0] & this.LOWER_MASK);\n    this.mt[this.N - 1] = this.mt[this.M - 1] ^ (y >>> 1) ^ mag01[y & 0x1];\n\n    this.mti = 0;\n  }\n\n  y = this.mt[this.mti++];\n\n  /* Tempering */\n  y ^= (y >>> 11);\n  y ^= (y << 7) & 0x9d2c5680;\n  y ^= (y << 15) & 0xefc60000;\n  y ^= (y >>> 18);\n\n  return y >>> 0;\n}\n\n/* generates a random number on [0,0x7fffffff]-interval */\nMersenneTwister.prototype.genrand_int31 = function () {\n  return (this.genrand_int32() >>> 1);\n}\n\n/* generates a random number on [0,1]-real-interval */\nMersenneTwister.prototype.genrand_real1 = function () {\n  return this.genrand_int32() * (1.0 / 4294967295.0);\n  /* divided by 2^32-1 */\n}\n\n/* generates a random number on [0,1)-real-interval */\nMersenneTwister.prototype.random = function () {\n  return this.genrand_int32() * (1.0 / 4294967296.0);\n  /* divided by 2^32 */\n}\n\n/* generates a random number on (0,1)-real-interval */\nMersenneTwister.prototype.genrand_real3 = function () {\n  return (this.genrand_int32() + 0.5) * (1.0 / 4294967296.0);\n  /* divided by 2^32 */\n}\n\n/* generates a random number on [0,1) with 53-bit resolution*/\nMersenneTwister.prototype.genrand_res53 = function () {\n  var a = this.genrand_int32() >>> 5, b = this.genrand_int32() >>> 6;\n  return (a * 67108864.0 + b) * (1.0 / 9007199254740992.0);\n}\n\n/* These real versions are due to Isaku Wada, 2002/01/09 added */\n\n\nexport default function random(seed) {\n  let generator = new MersenneTwister(seed);\n\n  return generator.random();\n};","import random from './MersenneTwister';\n\nconst options = [\n    'Sometimes sober ramblings',\n    'Offense intended',\n    'Hail Satan',\n    'Laughs in billable hours',\n    'Mo\\' metal, no problems',\n];\n\nconst getRandomTitle = () => options[Math.floor(random() * options.length)];\n\nexport {\n    getRandomTitle,\n};\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport '../scss/components/Header.scss';\n\nexport default class Header extends React.Component {\n    render() {\n        return (\n            <div className={ 'page-header' }>\n                <h1 className={ 'page-header__title' }>\n                    <Link to=\"/\">{ this.props.title }</Link>\n                </h1>\n            </div>\n        );\n    };\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport '../scss/components/Wrapper.scss';\n\nexport default class Wrapper extends React.Component {\n    render() {\n        return (\n            <div className={ this.props.class }>\n                { this.props.children }\n            </div>\n        );\n    };\n}\n\nWrapper.propTypes = {\n    class: PropTypes.string,\n};\n","export default function createQuery(query, callback) {\n    window.fetch(\n        `https://graphql.contentful.com/content/v1/spaces/${process.env.REACT_APP_CONTENTFUL_SPACE_ID}`,\n        {\n          method: 'POST',\n          headers: {\n            'Content-Type' : 'application/json',\n            'Authorization' : `Bearer ${process.env.REACT_APP_CONTENTFUL_ACCESS_TOKEN}`,\n          },\n          body: JSON.stringify({ query }),\n        }\n      ).then(\n        response => response.json()\n      ).then(({ data, errors }) => {\n        if (typeof callback === 'function') {\n            callback({ data, errors });\n        }\n      });\n}\n","import React from 'react';\nimport { PropTypes } from 'prop-types';\nimport Skeleton from 'react-loading-skeleton';\n\nexport default class PostListSkeleton extends React.Component {\n    static propTypes = {\n        total: PropTypes.number,\n    };\n\n    static defaultProps = {\n        total: 3,\n    };\n\n    render() {\n        return [...Array(this.props.total)].map((element, index) => {\n            return (\n                <div className={ 'post-item' } key={ index }>\n                    <article className={ 'post-item__content' }>\n                        <h3 className='post-item__title'>\n                            <Skeleton />\n                        </h3>\n\n                        <p><Skeleton count={ 3 } /></p>\n                    </article>\n\n                    <footer className=\"post-item__meta\">\n                        <span className=\"post-item__date\">\n                            <Skeleton width={ 300 } height={ 15 } />\n                        </span>\n                    </footer>\n                </div>\n            );\n        });\n    }\n}\n\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class TagItem extends React.Component {\n    render() {\n        if (!this.props.tag) {\n            return;\n        }\n\n        let element = this.props.element || 'span';\n        let className = 'tag-list__item';\n        let tag = this.props.tag;\n\n        return React.createElement(\n            element,\n            { className },\n            tag.title\n        );\n    };\n}\n\nTagItem.propTypes = {\n    tag: PropTypes.object,\n    element: PropTypes.string,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TagItem from './TagItem';\n\nimport '../scss/components/TagList.scss';\n\nexport default class TagList extends React.Component {\n    render() {\n        let tags = this.props.tags;\n\n        if (!tags) {\n            return;\n        }\n\n        return (\n            <ul className='tag-list'>\n                { tags.map((tag, index) => <TagItem tag={ tag } element='li' key={ index } />) }\n            </ul>\n        );\n    };\n}\n\nTagList.propTypes = {\n    tags: PropTypes.array,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport Moment from 'react-moment';\nimport Skeleton from 'react-loading-skeleton';\n\nimport TagList from './TagList';\n\nimport '../scss/components/PostItem.scss';\n\nexport default class PostItem extends React.Component {\n    render() {\n        let data = this.props.data;\n        let featuredImage = '';\n\n        if (data.featuredImage) {\n            featuredImage = (\n                <figure className={ 'post-item__image' }>\n                    <Link to={ `/post/${ data.slug }` }>\n                        <img src={ data.featuredImage.url } alt=\"{ data.title }\" title={ data.featuredImage.title } />\n                    </Link>\n                </figure>\n            );\n        }\n\n        return (\n            <div className={ 'post-item' }>\n                { featuredImage }\n\n                <article className={ 'post-item__content' }>\n                    <h3 className='post-item__title anaglyph-title'>\n                        <Link to={ `/post/${ data.slug }` }>{ data.title }</Link>\n                    </h3>\n\n                    { data.excerpt ? <p>{ data.excerpt }</p> : '' }\n                </article>\n\n                <footer className=\"post-item__meta\">\n                    <span className=\"post-item__date\">\n                        Posted on <time dateTime={ data.publishedAt }>\n                            <Moment format='Do MMMM, YYYY [at] h:mma'>{ data.publishedAt }</Moment>\n                        </time>\n                    </span>\n\n                    <TagList tags={ data.tagCollection.items || [] } />\n                </footer>\n            </div>\n        );\n    };\n}\n\nPostItem.propTypes = {\n    data: PropTypes.object,\n};\n","import React from 'react';\n\nimport getPosts from '../data/posts';\nimport PostListSkeleton from '../skeletons/PostList';\nimport PostItem from '../components/PostItem';\n\nimport '../scss/components/PostList.scss';\n\nexport default class PostList extends React.Component {\n    constructor() {\n        super();\n        \n        this.state = {\n            posts: [],\n        };\n    }\n\n    componentDidMount() {\n        getPosts(({ data, errors }) => {\n            if (errors) {\n                console.log(errors);\n            }\n\n            this.setState({ posts: data.postCollection.items });\n        });\n    }\n\n    render() {\n        let postMarkup = <PostListSkeleton />;\n\n        if (this.state.posts) {\n            postMarkup = this.state.posts.map((post, index) => <PostItem data={ post } key={ index } />);\n        }\n\n        return (\n            <div className={ 'post-list' }>\n                { postMarkup }\n            </div>\n        );\n    };\n}\n","import createQuery from './client';\n\nconst query = `{\n    postCollection {\n        items {\n            title\n            slug\n            excerpt\n            featuredImage {\n                url\n                title\n            }\n            tagCollection {\n                items {\n                    title\n                }\n            }\n            sys {\n                publishedAt\n                publishedVersion\n            }\n        }\n    }\n}`;\n\nexport default function getPosts(callback) {\n    createQuery(query, callback);\n};\n","import React, { Fragment } from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport Skeleton from 'react-loading-skeleton';\n\nexport default class PostViewSkeleton extends React.Component {\n    render() {\n        return (\n            <Fragment>\n                <Helmet>\n                    <title>Loading post</title>\n                </Helmet>\n\n                <div className={ 'post-view' }>\n                    <h2 className='post-view__title'>\n                        <Skeleton />\n                    </h2>\n                    \n                    <div className=\"post-view__meta\">\n                        <Skeleton width={ 300 } height={ 15 } />\n                    </div>\n\n                    <article className=\"post-view__content\">\n                        <Skeleton count={ 20 } />\n                    </article>\n                </div>\n            </Fragment>\n        );\n    }\n}\n","import React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { okaidia } from 'react-syntax-highlighter/dist/cjs/styles/prism';\n\nexport default class CodeBlock extends PureComponent {\n    static propTypes = {\n        value: PropTypes.string.isRequired,\n        languages: PropTypes.string,\n    };\n\n    static defaultProps = {\n        language: null,\n    };\n\n    render() {\n        const { language, value } = this.props;\n\n        return (\n            <SyntaxHighlighter language={ language } style={ okaidia }>\n                { value }\n            </SyntaxHighlighter>\n        );\n    }\n}\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Helmet } from 'react-helmet-async';\nimport { Redirect } from 'react-router-dom';\nimport ReactMarkdown from 'react-markdown';\nimport gfm from 'remark-gfm';\nimport Moment from 'react-moment';\n\nimport getPost from '../data/post';\nimport PostViewSkeleton from '../skeletons/PostView';\nimport TagList from '../components/TagList';\nimport CodeBlock from '../components/CodeBlock';\n\nimport '../scss/components/PostView.scss';\n\nexport default class PostView extends React.Component {\n    constructor() {\n        super();\n\n        this.state = {\n            post: null,\n        }\n    }\n\n    componentDidMount() {\n        getPost(this.props.match.params.slug, ({ data, errors }) => {\n            if (errors) {\n                console.log(errors);\n            }\n\n            this.setState({ post: data.postCollection.items[0] || false });\n        });\n    }\n\n    render() {\n        let post = this.state.post;\n\n        if (post === null) {\n            return (\n                <PostViewSkeleton />\n            );\n        }\n\n        if (post === false) {\n            return (\n                <Redirect to=\"/not-found\" />\n            );\n        }\n\n        let featuredImage = '';\n\n        if (post.featuredImage) {\n            featuredImage = (\n                <figure className={ 'post-view__image' }>\n                    <img src={ post.featuredImage.url } alt={ post.title } title={ post.featuredImage.title } />\n                </figure>\n            );\n        }\n\n        return (\n            <Fragment>\n                <Helmet>\n                    <title>Reading: \"{ post.title }\"</title>\n                </Helmet>\n\n                <div className={ 'post-view' }>\n                    { featuredImage }\n\n                    <h2 className='post-view__title anaglyph-title'>\n                        <span>{ post.title }</span>\n                    </h2>\n                    \n                    <div className=\"post-view__meta\">\n                        <span className=\"post-view__date\">\n                            Posted on <time dateTime={ post.publishedAt }>\n                                <Moment format='Do MMMM, YYYY [at] h:mma'>{ post.publishedAt }</Moment>\n                            </time>\n                        </span>\n\n                        <TagList tags={ post.tagCollection.items || [] } />\n                    </div>\n\n                    <article className=\"post-view__content\">\n                        <ReactMarkdown source={ post.content } renderers={{ code: CodeBlock }} plugins={ [ gfm ] } />\n                    </article>\n                </div>\n            </Fragment>\n        );\n    };\n}\n\nPostView.propTypes = {\n    post: PropTypes.object,\n};\n","import createQuery from './client';\n\nconst query = `{\n    postCollection(where: {slug: \"{slug}\"}) {\n        items {\n            title\n            content\n            featuredImage {\n                url\n                title\n            }\n            tagCollection {\n                items {\n                    title\n                }\n            }\n        }\n    }\n}`;\n\nexport default function getPost(slug, callback) {\n    createQuery(query.replace('{slug}', slug), callback);\n};\n","import random from './MersenneTwister';\n\nconst options = [\n    'Trying is the first step towards failure.',\n    'Success is just failure that hasn\\'t happened yet.',\n    'Not everything is a lesson. Sometimes you just fail.',\n    'If at first you don\\'t success, try, try again. Then quit. No use being a damn fool about it.',\n    'I\\'m sure the universe is full of intelligentl ife. It\\'s just been too intelligent to come here.',\n    'Two things are infinite: the universe and human stupidity; and I\\'m not sure about the universe.',\n    'Always remember that you are absolutely unique. Just like everyone else.',\n    'I am free of all prejudice. I hate everyone equally.',\n    'Light travels faster than sound. This is why some people appear bright until you hear them speak.',\n    'Hope is the first step on the road to disappointment.',\n    'The story so far: in the beginning the Universe was created. This has made a lot of people very angry and been widely regarded as a bad move.',\n    'Everything happens for a reason. Sometimes the reason is you\\'re stupid and make bad decisions.',\n];\n\nconst getRandomQuote = () => options[Math.floor(random() * options.length)];\n\nexport {\n    getRandomQuote,\n};\n","import React, { Fragment } from 'react';\nimport { Helmet } from 'react-helmet-async';\n\nimport { getRandomQuote } from '../scripts/QuoteRandomiser';\n\nimport '../scss/components/PostView.scss';\n\nexport default class EmptyView extends React.Component {\n    render() {\n        return (\n            <Fragment>\n                <Helmet>\n                    <title>There's nothing here</title>\n                </Helmet>\n\n                <div className={ 'post-view' }>\n                    <h2 className='post-view__title anaglyph-title'>\n                        <span>You've found nothing. Well done.</span>\n                    </h2>\n\n                    <article className=\"post-view__content\">\n                        <p>There's nothing here yet. If you intended to find something, then you're going about it the wrong way.</p>\n                        <p>Your prize? A demotivational quote to remind you how awful you are.</p>\n\n                        <blockquote>\n                            <p>{ getRandomQuote() }</p>\n                        </blockquote>\n                    </article>\n                </div>\n            </Fragment>\n        );\n    };\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport { Helmet, HelmetProvider } from 'react-helmet-async';\n\nimport './scss/variables.scss';\nimport './scss/core.scss';\n\nimport { getRandomTitle } from './scripts/TitleRandomiser';\n\nimport Header from './layout/Header';\nimport Wrapper from './layout/Wrapper';\nimport PostList from './views/PostList';\nimport PostView from './views/PostView';\nimport EmptyView from './views/EmptyView';\n\nconst pageTitle = getRandomTitle();\n\nReactDOM.render(\n    <React.StrictMode>\n        <HelmetProvider>\n            <Helmet>\n                <title>{ pageTitle }</title>\n            </Helmet>\n\n            <Router basename={ process.env.PUBLIC_URL }>\n                <Header title={ pageTitle } />\n\n                <div className='container'>\n                    <Wrapper class='page-content'>\n                        <Switch>\n                            <Route path='/not-found' component={ EmptyView } />\n                            <Route path='/post/:slug' component={ PostView } />\n                            <Route exact path='/' component={ PostList } />\n                            <Route component={ EmptyView } />\n                        </Switch>\n                    </Wrapper>\n                </div>\n            </Router>\n        </HelmetProvider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}